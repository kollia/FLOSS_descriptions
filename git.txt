
https://www.pro-linux.de/artikel/1/68/git-tutorium.html

************************************************
*
* git Konfigurieren
*
************************************************

$> git config --global user.name "Alexander Kolli"
$> git config --global user.email "programming@kolli.at"
$> git config --global core.editor nano                  - Editor einstellen
$> git config --global color.ui true                     - optional, Farbgebung für Terminal
$> git config --global credential.helper store           - speichert user:passwort@host beim nächsten $> git pull - unter ~/.git-credentials
$> git config --global credential.helper cache           - cached username und passwort
$> git config --global --unset credential.helper
$> git config --global pull.rebase true|false            - true für Rebasing beim pullen, false fürs Mergen
$> git config --global pull.ff only                      - ausschließlich Vorspulen anstatt pull.rebase
$> git config --global merge.tool kdiff3                 - merge tool kdiff3 global konfigurieren (for $> git mergetool)
$> 
[   
[       --global    - define for all repositories
[

Generating a new SSH key -> see: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
~~~~~~~~~~~~~~~~~~~~~~~~~~
$> ssh-keygen -t ed25519 -C "your_email@example.com"            -       generate key
                                                                        es wird ein Filename vorgeschlagen <filename> wenn der unter ~/.ssh/ schon existiert sollte man einen anderen nehmen
$> eval "$(ssh-agent -s)"                                       -       start ssh-agent in background
$> ssh-add ~/.ssh/<filename>                                    -       hinzufügen des Keys zum ssh-agent <filename> ohne .pub extension
$> cat ~/.ssh/<filename>.pub                                    -       kopiere die Ausgabe und füge sie in den Github-Settings ein
                                                                        kleines rundes Bild rechts oben ankliken
                                                                                -> Settings
                                                                                        -> linke Spalte "Access"-Abschnitt -> "SSH and GPG keys" auswählen
                                                                                                -> neuen Key erstellen mit grünem Button "New SSH key
                                                                                                        -> beliebigen Titel für Konnektion wählen
                                                                                                           und den kopierten Inhalt des Public Keys in das Key-Feld kopieren
$> ssh -T git@github.com                                        -       testing your connection
                                                                        wenn Du Deinen Namen siehst und es steht "You've successfully authenticated"
                                                                        kannst Du ein $> git clone <code> machen
                                                                        wichtig beim grünen Button "Code" SSH wählen

Verwende einen "personal access token" für https Abfrage -> see: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                kleines rundes Bild rechts oben ankliken
                        -> Settings
                                -> linke Spalte letzte Option -> "Developer settings" auswählen
                                        -> linke Spalte "Personal access tokens" auswählen
                                                -> Button rechts oben [generate new token]
                den erzeugten Token als Passwort verwenden
                genaue Beschreibung siehe -> https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#using-a-token-on-the-command-line


************************************************
*
* Erstellen eines reopsitories auf github
*
************************************************
[ - vom github server aus - ]
< create first in github a repository >
$> git clone <https://github.com/repository.git>

[ - vom eigenen Rechner aus - ]
$> git init    - first initial git localy to current folder
$> git clone --bare ./ <different path/new repository>.git      - make new repository and connect with own





************************************************
*
* git Basis-Bearbeitung
*
************************************************

$> git status           - zeigt an ob was zum einchecken vorhanden ist und welche files unversioniert sind
$> git log [option]     - zeigt alle bereits getätigten commits an
                          options:
                          --oneline     for pretty short display
                          --graph       creates a visual depiction of branch creation, checkouts and merges.
$> git restore <file>   - stellt Datei im Arbeitsverzeichnis wieder her
                          (verwirft Datei im Arbeitsverzeichnis)
$> git rm <file>        - remove files from repository
        --cached        - hold file in directory, but not for upload
        -f              - delete file also from local directory
        
$> git add <file>                       - add files to repository
$> git commit [-m "commit message"]     - mark all added files as commit to server
$> git push [remote]                            - push files to gitHup <remote>/<current branch>
$> git push -u origin <to branch>               - push local new repository to remote
$> git push -u origin <to branch> <from branch> - push from branch to new remote branch

$> git fetch [remote]                   - download from current remote branch into branch snapshot
$> git pull [remote]                    - download (git fetch) and merge with current stage

$> git stash                    - übernimmt alle Änderungen in einen Buffer
$> git stash list               - listet alle gespeicherten stashes auf
$> git stash apply [stash@{nr}] - übernimmt die gestashten änderungen wieder
                                  wird keine Nr angegeben, wird das erste angewendet
$> git stash drop [stash@{nr}]  - entfernt den gespeicherten stash
$> git stash pop [stash@{nr}]   - holt den stash, gleich wie apply, jedoch wird er auch aus den gespeicherten gelöscht


# wenn pull schief läuft nach merge bearbeitung
$> git pull origin master --allow-unrelated-histories

# wenn ein Repository zurückgespielt werden soll, nicht rückgänig zu machen
# in das gewünschte repository wechseln
$> git reset --hard <commit-name>
$> git config pull.rebase true
$> git push -f <remote> <branch> -> zb. git push -f origin main





************************************************
*
* git - arbeiten mit Branches
*
************************************************

$> git branch                                   - list all exist branches -> a star ('*') describe the current branch
$> git branch <branch>                          - create new branch locally
$> git push <remote-name> --delete <branch>     - remote name is mostly origin and delete there the given branch
$> git branch -d <branch>                       - löscht branch vom lokalen repository

$> git checkout <branch>      - wechselt auf existierenden branch
                  -b          - erzeugt branch befor er dorthin wechselt
$> git switch  <new Branch>   - wechselt auf existierenden branch
		  -c          - erzeugt branch befor er dorthin wechselt
$> git checkout <revision> .           - checkout older revision
$> git reset --hard                    - maybe you have to reset all changes before, or ...
$> git switch -c <new branch>          - save new changes from old commit in new branch

$> git rebase <from branch>     - ladet die aktuelle Basis vom zb. master branch (= merge ohne commit meldung)

$> git merge <from branch>      - fügt branch mit aktuellen branch zusammen


[ bring branches together development -> freeze
[ git merge                      

git merge <from branch>                  - merge current branche with given branch parameter

git fetch origin
git checkout -b freeze origin/freeze
git merge development

# make changes in conflict files

git checkout development
git merge --no-ff tschaunerx
git push origin kollia



************************************************
*
* git - Semantic Versioning ( X.Y.Z )
*       [major].[minor].[patch]-[build/beta/rc]
*       E.g. v1.2.0-beta
*
************************************************
$> git tag -a "v1.2.0-beta" -m "<commit message>"    -   set current revision to new version
$> git push --tags                                   -   push version to server
$> git describe                                      -   show current version
$> git show v1.2.0-beta                              -   view details

# see tag/commit contains in which branches
$> git branch [-a] --contains <tag|commit>

# delete local tag
$> git tag -d <tag-name>
# delete remote tag (eg, GitHub version too)
$> git push origin :refs/tags/<tag-name>
# alternative approach
$> git push --delete origin <tag-name>
$> git tag -d <tag-name>





************************************************
*
* git - working with sub-projects
*       from other repositories
*
************************************************

* implement submodule
* git submodule       -   create repository embedded inside another repository
* - only a reference
************************************************
$> git submodule add <sub-repo-url> [path]		# add submodule
							# sub-repo-url	- code path from github
							#		  like  https://github.com/PHPMailer/PHPMailer.git
							# path		- new subpath name (maybe other then PHPMailer in example before)

$> git commit -m "<text>				# add new module to remote repository
$> git push						# 

# create new repository which have submodules
$> git clone --recursive <repo-url>
# if submodul not exist after clone try in the root of repository
$> git submodule update --init --recursive


* implement subtree
* - no reference full repository
*   more easy to make changes
************************************************
$> git remote add -f <alias> <git repository>           # set an alias for git repository path
                                                        # for deleting $> git remote remove <alias>
                                                        # if clone in a new subdirectory the repository
                                                        # you have to add the remote alias again

$> ??? git merge -s ours <alias>/<branch> ???           # not realy know what done
                                                        # record a merge, so we can track later the entrys to this point

$> git subtree add --prefix <saving-path> <remote-alias> <sub-porject-branch> --squash
                                                        # create sub-project as subtree inside own repository
                                                        # --prefix <saving-path>   - path in own repository
                                                        # --squash                 - do'nt store full hisory of sub-project
                                                        #                            inside own repository
$> git log -2 --oneline                                 # show log only from subtrees
$> git log --all --grep="git-subtree-dir:"              # list all exist subtree creation 
$> git describe --tags <remote-alias>/<remote-branch>   # describe tag version of current subtree module
$> git remote --verbose                                 # show all remote repositories exist
$> git fetch <remote-alias> <remote-branch>             # fetch sources from subtree
$> git subtree pull --prefix <saving-path> <remote-alias> <remote-branch / remote-tag> --squash
                                                        # checkout subtree for new reote-branch or remote-tag



************************************************
*
* git - durch revisionen navigieren
*
************************************************
$> git bisect start             # first start bisect
$> git bisect bad               # than define current last commit version as bad
$> git bisect good <revision>   # afterwards define good version ex. git bisect good v2.6.13-rc2
$> git bisect < bad | good >    # handle now throu commits with bad or true
                                # git inform with |xxxxxxxxxxx| is the first bad commit
$> git bisect reset             # now when finding stop bisect > you be in last commit where you bisect started
$> git show <first bad commit>  # see bad issues (<first bad commit> can also be current HEAD command) or
$> git difftool HEAD~1 HEAD     # see also bad issues with kdiff3, but you have to checkout first bad commit
( define >> git config --global alias.showtool '!showci () { rev=${1:-HEAD}; git difftool $rev~1 $rev; }; showci $1' << for alias
  is usable as $> git showtool <first bad commit> # without checkout bad commit )

# in first bad commit make changes and merge it with branch you worked on
# inside first bad commit
$> git switch -c fix-error-<first bad commit hash> # create new branch
$> git revert <first bad commit>
# Fehler korrigieren und Änderungen committen
$> git add <changed files> # after made correction, commit it
$> git commit -m "Fix error in commit <first bad commit hash>"
$> git switch <current branch>       # go back to current branch you worked on
$> git pull origin <current branch>  # and make shure that you have last checkout
$> git switch fix-error-<first bad commit hash>
$> git rebase <current branch>       # rebase fix branch with current branch
$> git switch <current branch>
$> git merge fix-error-<first bad commit hash>
$> git push origin <current branch>

# create merge autmatical for all commits to HEAD
git switch -c fix-error-7c8d52b
git rebase -i 7c8d52b^   # make interactive fix for all commits
# Ändern Sie 'pick' zu 'edit' für den Commit 7c8d52b in der Rebase-Liste
# Fehler korrigieren und Änderungen committen
git add <betroffene_dateien>
git commit --amend --no-edit
git rebase --continue
git push origin fix-error-7c8d52b --force
git switch main
git merge fix-error-7c8d52b
git push origin main
